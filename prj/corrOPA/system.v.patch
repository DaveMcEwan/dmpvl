diff --git a/piton/design/rtl/system.v b/piton/design/rtl/system.v
index 2e5244d..3c017df 100644
--- a/piton/design/rtl/system.v
+++ b/piton/design/rtl/system.v
@@ -142,7 +142,9 @@ module system(
     input sys_clk,
 `endif
 
-    input                                       sys_rst_n,
+    input                                       GPIO_SW_E, // Reset/reboot OPA.
+    input                                       GPIO_SW_C, // Don't boot until sw is pressed.
+    input                                       GPIO_SW_W, // Toggle/select LED source.
 
 `ifndef PITON_FPGA_SYNTH
     input                                       pll_rst_n,
@@ -239,7 +241,7 @@ module system(
     output [`DDR3_DM_WIDTH-1:0]                 ddr_dm,
     `endif // PITONSYS_DDR4
     output [`DDR3_ODT_WIDTH-1:0]                ddr_odt,
-`else //ifndef F1_BOARD 
+`else //ifndef F1_BOARD
     input                                        mc_clk,
     // AXI Write Address Channel Signals
     output wire [`AXI4_ID_WIDTH     -1:0]    m_axi_awid,
@@ -306,8 +308,8 @@ module system(
     output                                      uart_tx,
     input                                       uart_rx,
 `ifdef VCU118_BOARD
-		input                                       uart_cts,
-		output                                      uart_rts,
+    input                                       uart_cts,
+    output                                      uart_rts,
 `endif // VCU118_BOARD
 `endif // endif PITONSYS_UART
 
@@ -391,15 +393,128 @@ module system(
 `endif
 
 `ifdef XUPP3R_BOARD
-    output [3:0]                                leds
-`else 
-    output [7:0]                                leds
+    output [3:0]                                leds,
+`else
+    output [7:0]                                leds,
 `endif
+
+  // {{{ pcb_003_004
+  // ULPI, copied from examples/maia
+  // FMC connector ports               UST-PCB-003a         UST-PCB-004a
+  input  wire FMC2_HPC_LA00_CC_P,        // ulpi_clkout          ulpi_clkout
+  output wire FMC2_HPC_LA00_CC_N,        //                      spdif_in0
+  inout  wire FMC2_HPC_LA01_CC_P,        // ulpi_d6              ulpi_d6
+  inout  wire FMC2_HPC_LA01_CC_N,        // ulpi_d7              ulpi_d7
+  input  wire FMC2_HPC_LA02_P,           // ulpi_nxt             ulpi_nxt
+  output wire FMC2_HPC_LA02_N,           // ulpi_stp             ulpi_stp
+  inout  wire FMC2_HPC_LA03_P,           // ulpi_d0              ulpi_d0
+  inout  wire FMC2_HPC_LA03_N,           // ulpi_d1              ulpi_d1
+  inout  wire FMC2_HPC_LA04_P,           // ulpi_d2              ulpi_d2
+  inout  wire FMC2_HPC_LA04_N,           // ulpi_d3              ulpi_d3
+  output wire FMC2_HPC_LA05_P,           // ulpi_resetb          ulpi_resetb
+  output wire FMC2_HPC_LA05_N,           //
+  output wire FMC2_HPC_LA06_P,           //                      spdif_in1
+  output wire FMC2_HPC_LA06_N,           //                      spdif_in2
+  output wire FMC2_HPC_LA07_P,           // LED_01               spdif_out0
+  output wire FMC2_HPC_LA07_N,           // LED_02               spdif_out1
+(* PULLDOWN = "TRUE" *)
+  input  wire FMC2_HPC_LA08_P,           // SW1
+  inout  wire FMC2_HPC_LA08_N,           // SW2                  LCD_r5
+  inout  wire FMC2_HPC_LA09_P,           // ulpi_d4              ulpi_d4
+  inout  wire FMC2_HPC_LA09_N,           // ulpi_d5              ulpi_d5
+  output wire FMC2_HPC_LA10_P,           // phy_refclk           phy_refclk
+  input  wire FMC2_HPC_LA10_N,           // ulpi_dir             ulpi_dir
+  output wire FMC2_HPC_LA11_P,           //
+  output wire FMC2_HPC_LA11_N,           //                      LCD_de
+  output wire FMC2_HPC_LA12_P,           //                      spdif_out2
+  output wire FMC2_HPC_LA12_N,           //
+  output wire FMC2_HPC_LA13_P,           //
+  output wire FMC2_HPC_LA13_N,           //                      LCD_b4
+  output wire FMC2_HPC_LA14_P,           //                      LCD_b5
+  output wire FMC2_HPC_LA14_N,           //                      LCD_b2
+  output wire FMC2_HPC_LA15_P,           //                      LCD_b0
+  output wire FMC2_HPC_LA15_N,           //                      LCD_g5
+  output wire FMC2_HPC_LA16_P,           //                      LCD_b3
+  output wire FMC2_HPC_LA16_N,           //                      LCD_b1
+(* PULLDOWN = "TRUE" *)
+  input  wire FMC2_HPC_LA17_CC_P,        // tck1                 TCK
+  output wire FMC2_HPC_LA17_CC_N,        //                      LCD_g4
+(* PULLDOWN = "TRUE" *)
+  inout  wire FMC2_HPC_LA18_CC_P,        // tck2                 LCD_g2
+  output wire FMC2_HPC_LA18_CC_N,        //                      LCD_r4
+  output wire FMC2_HPC_LA19_P,           //                      LCD_g0
+  output wire FMC2_HPC_LA19_N,           //                      LCD_r2
+  output wire FMC2_HPC_LA20_P,           //                      LCD_g3
+  output wire FMC2_HPC_LA20_N,           //                      LCD_g1
+  output wire FMC2_HPC_LA21_P,           //                      LCD_clk
+  output wire FMC2_HPC_LA21_N,           //                      aud_sdout
+  output wire FMC2_HPC_LA22_P,           //                      LCD_r0
+  output wire FMC2_HPC_LA22_N,           //                      aud_nreset
+  output wire FMC2_HPC_LA23_P,           //                      LCD_r3
+  output wire FMC2_HPC_LA23_N,           //                      LCD_r1
+(* PULLDOWN = "TRUE" *)
+  inout  wire FMC2_HPC_LA24_P,           // RTCK1   o            TDI         i
+(* PULLDOWN = "TRUE" *)
+  inout  wire FMC2_HPC_LA24_N,           // TDO1    o            TMS         i
+(* PULLUP = "TRUE" *)
+  inout  wire FMC2_HPC_LA25_P,           // RTCK2   o            TRSTn       i
+  output wire FMC2_HPC_LA25_N,           // TDO2    o            DBGACK      o
+  output wire FMC2_HPC_LA26_P,           //                      aud_lrclk
+(* PULLDOWN = "TRUE" *)
+  input  wire FMC2_HPC_LA26_N,           //                      aud_sdin
+  output wire FMC2_HPC_LA27_P,           //                      aud_mclk
+  output wire FMC2_HPC_LA27_N,           //                      aud_bclk
+(* PULLDOWN = "TRUE" *)
+  inout  wire FMC2_HPC_LA28_P,           // DBGACK1 o            DBGRQ       i
+(* PULLDOWN = "TRUE" *)
+  inout  wire FMC2_HPC_LA28_N,           // DBGRQ1  i            RTCK        o
+(* PULLUP = "TRUE" *)
+  inout  wire FMC2_HPC_LA29_P,           // DBGACK2 o            JTAG_resetn i
+(* PULLDOWN = "TRUE" *)
+  inout  wire FMC2_HPC_LA29_N,           // DBGRQ2  i            TDO         o
+(* PULLUP = "TRUE" *)
+  input  wire FMC2_HPC_LA30_P,           // resetn1 i
+(* PULLDOWN = "TRUE" *)
+  input  wire FMC2_HPC_LA30_N,           // TMS1    i
+(* PULLUP = "TRUE" *)
+  input  wire FMC2_HPC_LA31_P,           // resetn2 i
+(* PULLDOWN = "TRUE" *)
+  input  wire FMC2_HPC_LA31_N,           // TMS2    i
+(* PULLDOWN = "TRUE" *)
+  input  wire FMC2_HPC_LA32_P,           // TDI1    i
+(* PULLUP = "TRUE" *)
+  input  wire FMC2_HPC_LA32_N,           // TRST1   i
+(* PULLDOWN = "TRUE" *)
+  input  wire FMC2_HPC_LA33_P,           // TDI2    i
+(* PULLUP = "TRUE" *)
+  input  wire FMC2_HPC_LA33_N,           // TRST2   i
+  // }}} pcb_003_004
+
+  // VC707 with XM105 in FMC1 with external USB electrical conversion board.
+  // probes: J1 pins in order, overflowing onto J2
+  // pwm: J20 odd numbered pins.
+  // {{{ usb electrical conversion VC707.*
+  output FMC1_HPC_LA29_N, // USB OE     (T30 LVCMOS18 VC707.J17.XX XM105.J16.11)
+  inout  FMC1_HPC_LA29_P, // USB d-     (T29 LVCMOS18 VC707.J17.XX XM105.J16.9)
+  inout  FMC1_HPC_LA28_N, // USB d+     (L30 LVCMOS18 VC707.J17.XX XM105.J16.7)
+  output FMC1_HPC_LA28_P, // usbpu/Vext (L29 LVCMOS18 VC707.J17.XX XM105.J16.5)
+  // }}} usb electrical conversion VC707.*
+  // {{{ result pwm XM105.J20 odd
+  output FMC1_HPC_LA20_P, // (Y29 LVCMOS18 VC707.J17.G21 XM105.J20.1)
+  output FMC1_HPC_LA20_N, // (Y30 LVCMOS18 VC707.J17.G22 XM105.J20.3)
+  output FMC1_HPC_LA21_P, // (N28 LVCMOS18 VC707.J17.H25 XM105.J20.5)
+  output FMC1_HPC_LA21_N, // (N29 LVCMOS18 VC707.J17.H26 XM105.J20.7)
+  output FMC1_HPC_LA22_P, // (R28 LVCMOS18 VC707.J17.G24 XM105.J20.9)
+  output FMC1_HPC_LA22_N, // (P28 LVCMOS18 VC707.J17.G25 XM105.J20.11)
+  output FMC1_HPC_LA23_P, // (P30 LVCMOS18 VC707.J17.D23 XM105.J20.13)
+  output FMC1_HPC_LA23_N  // (N31 LVCMOS18 VC707.J17.D24 XM105.J20.15)
+  // }}} result pwm XM105.J20 odd
 );
 
 ///////////////////////
 // Type declarations //
 ///////////////////////
+wire [7:0] ledsChipset;
 
 `ifndef PITON_CLKS_SIM
 // If these are not provided from
@@ -553,6 +668,38 @@ assign rtc = rtc_div[6];
 assign uart_rts = 1'b0;
 `endif // VCU118_BOARD
 
+// System boots when sys_rst_n is low.
+// sys_rst_n <= 0 (allowing boot) when GPIO_SW_E is 0
+// sys_rst_n <= 0 (allowing boot) when inhibitBootN_q is 1
+// sys_rst_n <= 1 (preventing boot) when inhibitBootN_q is 0 or GPIO_SW_E is 1
+wire clk_48MHz;
+reg inhibitBootN_q;
+wire sys_rst_n = !inhibitBootN_q || GPIO_SW_E;
+
+wire rst;
+fpgaReset u_rst (
+  .i_clk        (clk_48MHz),
+  .i_pllLocked  (!GPIO_SW_E),
+  .o_rst        (rst)
+);
+
+// Correlator on separate reset to allow config the multiple boot runs.
+wire corr_rst;
+fpgaReset u_corr_rst (
+  .i_clk        (clk_48MHz),
+  .i_pllLocked  (1'b1),
+  .o_rst        (corr_rst)
+);
+
+always @ (posedge clk_48MHz)
+  if (rst)
+    inhibitBootN_q <= 1'b0;
+  else if (GPIO_SW_C)
+    inhibitBootN_q <= 1'b1;
+  else
+    inhibitBootN_q <= inhibitBootN_q;
+
+
 // Different reset active levels for different boards
 always @ *
 begin
@@ -687,8 +834,27 @@ assign passthru_pll_rst_n = 1'b1;
 // Sub-module Instances //
 //////////////////////////
 
+// Pipeline for probes to prevent messing up floorplan.
+localparam N_PROBE = 3*12 + 1; // <= 64
+wire tile_clk;
+wire [N_PROBE-2:0] chip_o_probe;
+reg [N_PROBE-1:0] chip_o_probe_q0,
+               chip_o_probe_q1,
+               chip_o_probe_q2,
+               chip_o_probe_q3,
+               chip_o_probe_q;
+always @ (posedge tile_clk) begin
+  chip_o_probe_q0 <= {chip_o_probe, 1'b0};
+  chip_o_probe_q1 <= chip_o_probe_q0;
+  chip_o_probe_q2 <= chip_o_probe_q1;
+  chip_o_probe_q3 <= chip_o_probe_q2;
+  chip_o_probe_q  <= chip_o_probe_q3;
+end
+
 // Piton chip
 chip chip(
+    .o_clk_muxed(tile_clk),
+    .o_probe(chip_o_probe),
     // I/O settings
 `ifdef PITON_FPGA_SYNTH
     // Tie these off if not used
@@ -910,12 +1076,15 @@ passthru passthru(
 `endif // endif PITONSYS_INC_PASSTHRU
 
 // Piton chipset
+wire mc_sys_clk_200MHz;
 chipset chipset(
+    .corr_clk(clk_48MHz),
+    .mc_sys_clk_200MHz(mc_sys_clk_200MHz),
     // Only need oscillator clock if
     // chipset is generating its own clocks
 `ifdef F1_BOARD
     .sys_clk(sys_clk),
-`else 
+`else
 
 `ifdef PITON_CHIPSET_CLKS_GEN
 `ifdef PITON_CHIPSET_DIFF_CLK
@@ -1192,7 +1361,7 @@ chipset chipset(
 `ifndef XUPP3R_BOARD
     .sw(sw),
 `endif
-    .leds(leds)
+    .leds(ledsChipset)
 
 `ifdef PITON_ARIANE
     ,
@@ -1218,4 +1387,429 @@ chipset chipset(
 
 );
 
+// {{{ correlator
+wire o_pin_usbpu = !corr_rst;
+wire b_pin_usb_p;
+wire b_pin_usb_n;
+wire o_pin_usb_oe;
+  localparam N_ENGINE = 8;
+
+  assign FMC1_HPC_LA29_N = o_pin_usb_oe;
+  assign b_pin_usb_p = FMC1_HPC_LA28_N;
+  assign b_pin_usb_n = FMC1_HPC_LA29_P;
+  assign FMC1_HPC_LA28_P = o_pin_usbpu;
+
+  wire [N_ENGINE-1:0] o_pin_pwm;
+  assign {
+    FMC1_HPC_LA23_N,
+    FMC1_HPC_LA23_P,
+    FMC1_HPC_LA22_N,
+    FMC1_HPC_LA22_P,
+    FMC1_HPC_LA21_N,
+    FMC1_HPC_LA21_P,
+    FMC1_HPC_LA20_N,
+    FMC1_HPC_LA20_P
+  } = o_pin_pwm;
+
+wire usb_p;
+wire usb_n;
+wire usbOutputEnable; // Select GPIO input/output mode.
+wire usbTx_p;
+wire usbTx_n;
+wire usbRx_p;
+wire usbRx_n;
+
+// Supply receiver with J line state when transmitting.
+assign usbRx_p = usbOutputEnable ? 1'b1 : usb_p;
+assign usbRx_n = usbOutputEnable ? 1'b0 : usb_n;
+
+IOBUF #(
+  .DRIVE        (16),
+  .IBUF_LOW_PWR ("FALSE"),
+  .IOSTANDARD   ("DEFAULT"),
+  .SLEW         ("FAST")
+) iobuf_usbp (
+  .O  (usb_p),
+  .I  (usbTx_p),
+  .IO (b_pin_usb_p),
+  .T  (!usbOutputEnable)
+);
+
+IOBUF #(
+  .DRIVE        (16),
+  .IBUF_LOW_PWR ("FALSE"),
+  .IOSTANDARD   ("DEFAULT"),
+  .SLEW         ("FAST")
+) iobuf_usbn (
+  .O  (usb_n),
+  .I  (usbTx_n),
+  .IO (b_pin_usb_n),
+  .T  (!usbOutputEnable)
+);
+
+wire ledSrc;
+syncBit #(
+  .DEBOUNCE_CYCLES (240000), // 5ms at 48MHz
+  .EDGECNTR_W (1),
+  .N_SYNC     (2)
+) u_btnW (
+  .i_clk        (clk_48MHz),
+  .i_cg         (1'b1),
+  .i_rst        (corr_rst),
+
+  .i_bit      (GPIO_SW_W),
+
+  .o_bit      (),
+  .o_edge     (),
+  .o_rise     (),
+  .o_fall     (),
+  .o_nEdge    (),
+  .o_nRise    (ledSrc),
+  .o_nFall    ()
+);
+
+assign leds = ledSrc ? resultPwm : ledsChipset;
+
+
+wire [N_ENGINE-1:0] resultPwm;
+usbfsBpCorrelator #(
+  .USBFS_VIDPID_SQUAT     (1),
+  .USBFS_ACM_NOT_GENERIC  (1),
+  .USBFS_MAX_PKT          (16), // in {8,16,32,64}. wMaxPacketSize
+  .N_PROBE                (N_PROBE),
+  .N_ENGINE               (N_ENGINE),
+  .MAX_WINDOW_LENGTH_EXP  (16),
+  .MAX_SAMPLE_PERIOD_EXP  (15),
+  .MAX_SAMPLE_JITTER_EXP  (8),
+  .WINDOW_PRECISION       (8), // 1 < p <= MAX_WINDOW_LENGTH_EXP
+  .METRIC_PRECISION       (16),
+  .PKTFIFO_DEPTH          (50)
+) u_usbfsBpCorrelator (
+  .i_clk_48MHz        (clk_48MHz),
+  .i_rst              (corr_rst),
+  .i_cg               (1'b1),
+
+  // USB {d+, d-}, output enable.
+  .i_dp               (usbRx_p),
+  .i_dn               (usbRx_n),
+  .o_dp               (usbTx_p),
+  .o_dn               (usbTx_n),
+  .o_oe               (usbOutputEnable),
+
+  .i_probe            (chip_o_probe_q),
+
+  .o_pwm              (resultPwm)
+);
+assign o_pin_usb_oe = usbOutputEnable;
+
+assign o_pin_pwm = resultPwm;
+// }}} correlator
+
+// {{{ corrdemo0
+
+// Separate PLL just for USB PHY (TI3133)
+wire clk_26MHz;
+wire pll26Locked;
+
+// Buffer differential pair to single ended signal.
+/* NOTE: Cannot connect pins to more than one IBUFDS so use 200MHz mc_sys_clk as
+ * input to 26MHz-generating PLL.
+wire clk_raw200MHz;
+IBUFDS u_ibufgds_sysclk (
+  .I  (chipset_clk_osc_p),
+  .IB (chipset_clk_osc_n),
+  .O  (clk_raw200MHz)
+);
+*/
+
+// Feedback buffer.
+wire clkfbout, clkfbin;
+BUFG u_bufg_clkf (
+  .I (clkfbout),
+  .O (clkfbin)
+);
+
+wire clkout0;
+wire _unused_clkout1;
+wire _unused_clkout2;
+wire _unused_clkout3;
+wire _unused_clkout4;
+wire _unused_clkout5;
+
+wire [15:0] _unused_do;
+wire        _unused_drdy;
+
+PLLE2_ADV #(
+  .CLKIN1_PERIOD      (5.000),    // 200MHz
+  .DIVCLK_DIVIDE      (2),        // 200 / 2 = 100MHz
+  .CLKFBOUT_MULT      (13),       // 100 * 13 = 1300MHz
+  .CLKFBOUT_PHASE     (0.000),
+  .CLKOUT0_DIVIDE     (50),       // 1300 / 50 = 26MHz
+  .CLKOUT0_PHASE      (0.000),
+  .CLKOUT0_DUTY_CYCLE (0.500),
+  .BANDWIDTH          ("OPTIMIZED"),
+  .COMPENSATION       ("ZHOLD"),
+  .STARTUP_WAIT       ("FALSE")
+) u_plle2_adv (
+  //.CLKIN1           (clk_raw200MHz),
+  .CLKIN1             (mc_sys_clk_200MHz),
+  .CLKIN2             (1'b0),
+  .CLKINSEL           (1'b1),
+
+  .CLKFBIN            (clkfbin),
+  .CLKFBOUT           (clkfbout),
+
+  .CLKOUT0            (clkout0),
+  .CLKOUT1            (_unused_clkout1),
+  .CLKOUT2            (_unused_clkout2),
+  .CLKOUT3            (_unused_clkout3),
+  .CLKOUT4            (_unused_clkout4),
+  .CLKOUT5            (_unused_clkout5),
+
+  .DADDR              (7'h0),
+  .DCLK               (1'b0),
+  .DEN                (1'b0),
+  .DI                 (16'h0),
+  .DO                 (_unused_do),
+  .DRDY               (_unused_drdy),
+  .DWE                (1'b0),
+
+  .LOCKED             (pll26Locked),
+  .PWRDWN             (1'b0),
+  .RST                (1'b0)
+);
+
+BUFG bufg_clk_26MHz_u (
+  .I(clkout0),
+  .O(clk_26MHz)
+);
+
+wire        ust_usb0_ulpi_dir_w;
+wire        ust_usb0_ulpi_nxt_w;
+wire        ust_usb0_ulpi_stp_w;
+wire [7:0]  ust_usb0_ulpi_data_in_w;
+wire [7:0]  ust_usb0_ulpi_data_out_w;
+
+// TODO: Hookup to something useful?
+//wire [3:0]  pcb004_card_led_w = 4'b0001;
+wire sm0_correlator_pwm;
+wire [3:0]  pcb004_card_led_w = {2'b00, sm0_correlator_pwm, clk_26MHz};
+wire [1:0]  pcb004_card_sw_w;
+wire [4:0]  pcb004_joystick_w;
+wire        clk_ulpi_raw60MHz; // Generated on external PHY.
+
+// Keep USB PHY in reset for a bit to allow 13MHz clock to become established
+// There is a gap, estimated to be less than 256*26MHz cycles, where the 13MHz
+// clock is between 'definitely unstable' and 'presumed stable'.
+// NOTE: Same technique as fpgaReset.
+reg  [7:0] ulpi_13MHz_downcounter_q;
+wire [7:0] ulpi_13MHz_downcounter_d;
+wire ulpi_13MHz_presumeStable;
+wire ulpi_13MHz_isUnstable = !pll26Locked; // Used as reset for 8 dffs.
+always @(posedge clk_26MHz or posedge ulpi_13MHz_isUnstable)
+  if (ulpi_13MHz_isUnstable)          ulpi_13MHz_downcounter_q <= 8'hff;
+  else if (!ulpi_13MHz_presumeStable) ulpi_13MHz_downcounter_q <= ulpi_13MHz_downcounter_d;
+assign {ulpi_13MHz_presumeStable, ulpi_13MHz_downcounter_d} =
+       {1'b0,                     ulpi_13MHz_downcounter_q} - 1;
+
+ust_pcb_003_004_m #( // {{{
+  .jtag_support_p(1),
+  .j64_support_p(1)
+) ust_pcb_003_004_u (
+  // {{{ pins
+  // FMC connector ports             // UST-PCB-003a         UST-PCB-004a
+  .FMC_LA00_CC_P(FMC2_HPC_LA00_CC_P),// ulpi_clkout          ulpi_clkout
+  .FMC_LA00_CC_N(FMC2_HPC_LA00_CC_N),//                      spdif_in0
+  .FMC_LA01_CC_P(FMC2_HPC_LA01_CC_P),// ulpi_d6              ulpi_d6
+  .FMC_LA01_CC_N(FMC2_HPC_LA01_CC_N),// ulpi_d7              ulpi_d7
+  .FMC_LA02_P   (FMC2_HPC_LA02_P),   // ulpi_nxt             ulpi_nxt
+  .FMC_LA02_N   (FMC2_HPC_LA02_N),   // ulpi_stp             ulpi_stp
+  .FMC_LA03_P   (FMC2_HPC_LA03_P),   // ulpi_d0              ulpi_d0
+  .FMC_LA03_N   (FMC2_HPC_LA03_N),   // ulpi_d1              ulpi_d1
+  .FMC_LA04_P   (FMC2_HPC_LA04_P),   // ulpi_d2              ulpi_d2
+  .FMC_LA04_N   (FMC2_HPC_LA04_N),   // ulpi_d3              ulpi_d3
+  .FMC_LA05_P   (FMC2_HPC_LA05_P),   // ulpi_resetb          ulpi_resetb
+  .FMC_LA05_N   (FMC2_HPC_LA05_N),
+  .FMC_LA06_P   (FMC2_HPC_LA06_P),   //                      spdif_in1
+  .FMC_LA06_N   (FMC2_HPC_LA06_N),   //                      spdif_in2
+  .FMC_LA07_P   (FMC2_HPC_LA07_P),   // LED_01               spdif_out0
+  .FMC_LA07_N   (FMC2_HPC_LA07_N),   // LED_02               spdif_out1
+  .FMC_LA08_P   (FMC2_HPC_LA08_P),   // SW1
+  .FMC_LA08_N   (FMC2_HPC_LA08_N),   // SW2                  LCD_r5
+  .FMC_LA09_P   (FMC2_HPC_LA09_P),   // ulpi_d4              ulpi_d4
+  .FMC_LA09_N   (FMC2_HPC_LA09_N),   // ulpi_d5              ulpi_d5
+  .FMC_LA10_P   (FMC2_HPC_LA10_P),   // phy_refclk           phy_refclk 13MHz
+  .FMC_LA10_N   (FMC2_HPC_LA10_N),   // ulpi_dir             ulpi_dir
+  .FMC_LA11_P   (FMC2_HPC_LA11_P),
+  .FMC_LA11_N   (FMC2_HPC_LA11_N),   //                      LCD_de
+  .FMC_LA12_P   (FMC2_HPC_LA12_P),   //                      spdif_out2
+  .FMC_LA12_N   (FMC2_HPC_LA12_N),
+  .FMC_LA13_P   (FMC2_HPC_LA13_P),
+  .FMC_LA13_N   (FMC2_HPC_LA13_N),   //                      LCD_b4
+  .FMC_LA14_P   (FMC2_HPC_LA14_P),   //                      LCD_b5
+  .FMC_LA14_N   (FMC2_HPC_LA14_N),   //                      LCD_b2
+  .FMC_LA15_P   (FMC2_HPC_LA15_P),   //                      LCD_b0
+  .FMC_LA15_N   (FMC2_HPC_LA15_N),   //                      LCD_g5
+  .FMC_LA16_P   (FMC2_HPC_LA16_P),   //                      LCD_b3
+  .FMC_LA16_N   (FMC2_HPC_LA16_N),   //                      LCD_b1
+  .FMC_LA17_CC_P(FMC2_HPC_LA17_CC_P),// tck1                 TCK
+  .FMC_LA17_CC_N(FMC2_HPC_LA17_CC_N),//                      LCD_g4
+  .FMC_LA18_CC_P(FMC2_HPC_LA18_CC_P),// tck2                 LCD_g2
+  .FMC_LA18_CC_N(FMC2_HPC_LA18_CC_N),//                      LCD_r4
+  .FMC_LA19_P   (FMC2_HPC_LA19_P),   //                      LCD_g0
+  .FMC_LA19_N   (FMC2_HPC_LA19_N),   //                      LCD_r2
+  .FMC_LA20_P   (FMC2_HPC_LA20_P),   //                      LCD_g3
+  .FMC_LA20_N   (FMC2_HPC_LA20_N),   //                      LCD_g1
+  .FMC_LA21_P   (FMC2_HPC_LA21_P),   //                      LCD_clk
+  .FMC_LA21_N   (FMC2_HPC_LA21_N),   //                      aud_sdout
+  .FMC_LA22_P   (FMC2_HPC_LA22_P),   //                      LCD_r0
+  .FMC_LA22_N   (FMC2_HPC_LA22_N),   //                      aud_nreset
+  .FMC_LA23_P   (FMC2_HPC_LA23_P),   //                      LCD_r3
+  .FMC_LA23_N   (FMC2_HPC_LA23_N),   //                      LCD_r1
+  .FMC_LA24_P   (FMC2_HPC_LA24_P),   // RTCK1                TDI
+  .FMC_LA24_N   (FMC2_HPC_LA24_N),   // TDO1                 TMS
+  .FMC_LA25_P   (FMC2_HPC_LA25_P),   // RTCK2                TRSTn
+  .FMC_LA25_N   (FMC2_HPC_LA25_N),   // TDO2                 DBGACK
+  .FMC_LA26_P   (FMC2_HPC_LA26_P),   //                      aud_lrclk
+  .FMC_LA26_N   (FMC2_HPC_LA26_N),   //                      aud_sdin
+  .FMC_LA27_P   (FMC2_HPC_LA27_P),   //                      aud_mclk
+  .FMC_LA27_N   (FMC2_HPC_LA27_N),   //                      aud_bclk
+  .FMC_LA28_P   (FMC2_HPC_LA28_P),   // DBGACK1              DBGRQ
+  .FMC_LA28_N   (FMC2_HPC_LA28_N),   // DBGRQ1               RTCK
+  .FMC_LA29_P   (FMC2_HPC_LA29_P),   // DBGACK2              JTAG_resetn
+  .FMC_LA29_N   (FMC2_HPC_LA29_N),   // DBGRQ2               TDO
+  .FMC_LA30_P   (FMC2_HPC_LA30_P),   // resetn1
+  .FMC_LA30_N   (FMC2_HPC_LA30_N),   // TMS1
+  .FMC_LA31_P   (FMC2_HPC_LA31_P),   // resetn2
+  .FMC_LA31_N   (FMC2_HPC_LA31_N),   // TMS2
+  .FMC_LA32_P   (FMC2_HPC_LA32_P),   // TDI1
+  .FMC_LA32_N   (FMC2_HPC_LA32_N),   // TRST1
+  .FMC_LA33_P   (FMC2_HPC_LA33_P),   // TDI2
+  .FMC_LA33_N   (FMC2_HPC_LA33_N),   // TRST2
+  // }}} pins
+
+  // LEDs and pushbuttons
+  .card_led_ip(pcb004_card_led_w),
+  .card_sw_op (pcb004_card_sw_w),
+  .joystick_op (pcb004_joystick_w),
+
+  // USB interface
+  .ust_clk_phy_refclk_ip(clk_26MHz), // 26MHz reference straight from PLL
+  .ulpi_raw_clk60_op    (clk_ulpi_raw60MHz), // Could put this through PLL for ss_corrdemo0.
+
+  .ust_clk_usb_ip     (1'b0), // unused, goes nowhere
+  .ulpi_phy_rst_n_ip  (ulpi_13MHz_presumeStable), // Hold low until 13MHz is stable.
+  .ulpi_dir_op        (ust_usb0_ulpi_dir_w),
+  .ulpi_nxt_op        (ust_usb0_ulpi_nxt_w),
+  .ulpi_stp_ip        (ust_usb0_ulpi_stp_w),
+  .ulpi_data_in_op    (ust_usb0_ulpi_data_in_w),
+  .ulpi_data_out_ip   (ust_usb0_ulpi_data_out_w),
+
+  .select_004_ip(1'b0), // Gaj's personal is 003a, broken one was 004c
+
+  // {{{ Additional unused interfaces
+  // J64
+  .j64_tdo_op   (),
+  .j64_tck_ip   (1'b0),
+  .j64_tms_ip   (1'b0),
+  .j64_tdi_ip   (1'b0),
+
+  // Board select
+  .jtag1_003_ip (1'b0), // If board 003 selected, set this to use JTAG port 1 (1.8V)
+  .jtag_j64_ip  (1'b0),
+
+  // LCD interface
+  .lcd_r_ip  (1'b0),
+  .lcd_g_ip  (1'b0),
+  .lcd_b_ip  (1'b0),
+  .lcd_clk_ip(1'b0),
+  .lcd_de_ip (1'b0),
+
+  // JTAG interface
+  .ext_tck_op   (),
+  .ext_tms_op   (),
+  .ext_tdi_op   (),
+  .ext_tdo_ip   (1'b0),
+  .ext_tdo_oe_ip(1'b0),
+  .ext_trst_n_op(),
+
+  // Audio interface
+  .audio_rstn_ip (1'b0),
+  .audio_mclk_ip (1'b0),
+  .audio_bclk_ip (1'b0),
+  .audio_lrclk_ip(1'b0),
+  .audio_dout_ip (1'b0),
+  .audio_din_op  (),
+
+  .spdif_out_ip  (1'b0),
+  .spdif_in_op   (),
+
+  // IODELAY support
+  .ust_clk_200_ip   (1'b0), // unused, goes nowhere
+  .ust_rst_idelay_ip(1'b0), // unused, goes nowhere
+
+  // Debug out
+  .debug_op()             // unused, Paul's bringup aid
+  // }}} Additional unused interfaces
+); // }}} ust_pcb_003_004_m
+
+wire [15:0] corrdemo0_probes = {
+  chip_o_probe_q[36],
+  chip_o_probe_q[35],
+  chip_o_probe_q[34],
+
+  chip_o_probe_q[24],
+  chip_o_probe_q[23],
+  chip_o_probe_q[22],
+
+  chip_o_probe_q[18],
+  chip_o_probe_q[17],
+  chip_o_probe_q[16],
+
+  chip_o_probe_q[12],
+  chip_o_probe_q[11],
+  chip_o_probe_q[10],
+
+  chip_o_probe_q[6],
+  chip_o_probe_q[5],
+  chip_o_probe_q[4],
+
+  1'b0
+};
+ust_ss_corrdemo0_m ust_ss_corrdemo0_u (
+  .ust_clk_udb_ip             (clk_48MHz),
+  .ust_rst_udb_ip             (rst),
+
+  .ust_clk_usb0_usb_ip        (clk_ulpi_raw60MHz),
+  .ust_rst_usb0_usb_ip        (!ulpi_13MHz_presumeStable),
+  .ust_usb0_ulpi_dir_ip       (ust_usb0_ulpi_dir_w),
+  .ust_usb0_ulpi_nxt_ip       (ust_usb0_ulpi_nxt_w),
+  .ust_usb0_ulpi_stp_op       (ust_usb0_ulpi_stp_w),
+  .ust_usb0_ulpi_data_in_ip   (ust_usb0_ulpi_data_in_w),
+  .ust_usb0_ulpi_data_out_op  (ust_usb0_ulpi_data_out_w),
+  .ust_usb0_testmode_ip       (1'b0),
+  .ust_usb0_vbus_ip           (1'b0),
+
+  .ust_me0_gpio_out_op        (), // unused
+  .ust_me0_gpio_in_ip         (1'b0),
+
+  .ust_clk_sm0_sts_ip         (clk_48MHz),
+  .ust_sm0_sts_match_ip       (corrdemo0_probes),
+  .ust_sm0_sts_match_valid_ip (1'b1),
+  .ust_sm0_sts_filter_ip      (1'b0),
+  .ust_sm0_sts_filter_valid_ip(1'b0),
+  .ust_sm0_sts_data_ip        (1'b0),
+  .ust_sm0_sts_data_valid_ip  (1'b0),
+  .ust_sm0_sts_accum_ip       (1'b0),
+  .ust_sm0_correlator_pwm_op  (sm0_correlator_pwm),
+  .ust_en_sm0_sts_op          (/*TODO GPIO_LED_1*/),
+  .ust_sm0_gpio_output_op     (), // unused
+  .ust_sm0_testmode_ip        (1'b0),
+  .ust_sm0_scan_shift_ip      (1'b0),
+  .ust_sm0_version_op         (), // unused
+  .ust_sm0_instance_id_ip     (1'b0) // Same as TB.
+);
+
+// }}} corrdemo0
+
 endmodule
