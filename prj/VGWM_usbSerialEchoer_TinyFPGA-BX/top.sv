
module top (
  input  i_pin_clk_16MHz, // TinyFPGA-BX oscillator

  inout  b_pin_usb_p,     // USB d+
  inout  b_pin_usb_n,     // USB d-
  output o_pin_pu,        // USB host-detect pull-up

  output o_pin_led
);

// PLL generated by icepll.
wire clk_48MHz;
wire pllLocked;
pll48 u_pll48 (
  .clock_in   (i_pin_clk_16MHz),
  .clock_out  (clk_48MHz),
  .locked     (pllLocked)
);

wire rst;
fpgaReset u_rst (
  .i_clk        (clk_48MHz),
  .i_pllLocked  (pllLocked),
  .o_rst        (rst)
);

reg [22:0] ledCounter_q;
always @(posedge clk_48MHz)
  if (rst)
    ledCounter_q <= 23'd0;
  else
    ledCounter_q <= ledCounter_q + 23'd1;
assign o_pin_led = ledCounter_q[22];


wire usb_p;
wire usb_n;
wire usbTxEn; // Select GPIO input/output mode.
wire usbTx_p;
wire usbTx_n;
wire usbRx_p;
wire usbRx_n;

assign usbRx_p = usbTxEn ? 1'b1 : usb_p;
assign usbRx_n = usbTxEn ? 1'b0 : usb_n;

SB_IO #(
  .PIN_TYPE (6'b101001), // PIN_OUTPUT_TRISTATE - PIN_INPUT
  .PULLUP   (1'b0)
) iobuf_usbp (
  .PACKAGE_PIN    (b_pin_usb_p),
  .OUTPUT_ENABLE  (usbTxEn),
  .D_OUT_0        (usbTx_p),
  .D_IN_0         (usb_p)
);

SB_IO #(
  .PIN_TYPE (6'b101001), // PIN_OUTPUT_TRISTATE - PIN_INPUT
  .PULLUP   (1'b0)
) iobuf_usbn (
  .PACKAGE_PIN    (b_pin_usb_n),
  .OUTPUT_ENABLE  (usbTxEn),
  .D_OUT_0        (usbTx_n),
  .D_IN_0         (usb_n)
);

assign o_pin_pu = 1'b1;


wire [7:0] uartIn_data;
wire       uartIn_valid;
wire       uartIn_ready;
wire [7:0] uartOut_data;
wire       uartOut_valid;
wire       uartOut_ready;

usbSerial u_usbSerial (
  .i_clk_48MHz      (clk_48MHz),
  .i_rst            (rst),

  .i_usbRx_p        (usbRx_p),
  .i_usbRx_n        (usbRx_n),
  .o_usbTx_p        (usbTx_p),
  .o_usbTx_n        (usbTx_n),
  .o_usbTxEn        (usbTxEn),

  // uart pipeline in
  .i_uartIn_data    (uartIn_data),
  .i_uartIn_valid   (uartIn_valid),
  .o_uartIn_ready   (uartIn_ready),

  // uart pipeline out
  .o_uartOut_data   (uartOut_data),
  .o_uartOut_valid  (uartOut_valid),
  .i_uartOut_ready  (uartOut_ready)
);

// Loopback data to/from usbUart_ice40.v, changing upper/lower case.
assign uartIn_valid = uartOut_valid;
assign uartIn_data = uartOut_data ^ 8'h20;
assign uartOut_ready = uartIn_ready;

endmodule
